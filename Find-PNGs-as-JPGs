import os
import sys

from logger_config import setup_custom_logger
from shared_methods import get_exif_data, setup_database, has_been_processed, move_or_rename_file

logger = setup_custom_logger('Find-PNGs-as-JPGs')

PHOTO_EXTENSIONS = {'.png', '.jpg', '.jpeg', '.tiff', '.bmp', '.gif'}
DATABASE_NAME = 'mislabled_images.db'
DATABASE_TABLE = 'file_updates'
DATABASE_PRIMARY = 'file_path'
DATABASE_COLUMN = 'new_file_path'

# Check if the file has already been processed.


def process_images(start_directory):
    # Find image files anywhere within the start_directory that match DATETIME format
    for root, dirs, files in os.walk(start_directory):
        for file in files:
            file_path = os.path.join(root, file)
            if has_been_processed(DATABASE_NAME, DATABASE_TABLE, [DATABASE_PRIMARY, DATABASE_COLUMN], file_path, logger):
                logger.info(f"\"{file_path}\" has already been processed.")
                continue
            
            _, file_extension = os.path.splitext(file)
            if file_extension.lower() in PHOTO_EXTENSIONS:
                continue
            
            file_type = None
            file_type = get_exif_data(file_path, 'FileType', logger)
            
            # if file_extension doesn't match file_type, rename the file
            if file_extension.replace('.','').lower() != file_type.lower():
                new_file_path = file_path.replace(file_extension, f".{file_type.lower()}")
                move_or_rename_file(file_path, new_file_path)
            else:
                logger.info(f"\"{file_path}\" is correctly labeled as a \"{file_type}\" file.")

# Command line interaction
if len(sys.argv) > 1:
    start_directory = sys.argv[1]
if not os.path.isdir(start_directory):
    logger.error(f"\"{start_directory}\" is not a valid directory.")
    sys.exit(1)
setup_database(DATABASE_NAME, '''
        CREATE TABLE IF NOT EXISTS file_updates (
            file_path TEXT PRIMARY KEY,
            extension TEXT,
            file_type TEXT,
            new_file_path TEXT
        )
    ''')
process_images(start_directory)